@page "/unidadmedicion"
@attribute [Authorize]


@using System.Collections.Generic
@using FrontBlazor.Services

@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<PageTitle>Unidades de Medicion</PageTitle>

<h1>Unidades de Medicion</h1>

<!-- Botón para crear nueva unidad -->
<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nueva</button>
</div>

<!-- Formulario para crear una nueva unidad -->
@if (mostrarFormularioCrear)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Nueva Unidad de Medicion</h5>
            <form>
                <div class="form-group">
                    <label for="descripcion">Descripción</label>
                    <input type="text" class="form-control" @bind="nuevaDescripcion" />
                </div>
                <button type="button" class="btn btn-success" @onclick="GuardarUnidad">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelarCreacion">Cancelar</button>
            </form>
        </div>
    </div>
}

<!-- Tabla con unidades existentes -->
@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (unidades == null || unidades.Count == 0)
{
    <p>No hay unidades de medicion disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Descripción</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var unidad in unidades)
                {
                    <tr>
                        <td>@ObtenerValor(unidad, "id")</td>
                        <td>@ObtenerValor(unidad, "descripcion")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditarUnidad(unidad)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarUnidad(unidad)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Modal de edición -->
@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Unidad de Medicion</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalEditar"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editarDescripcion">Descripción</label>
                        <input type="text" class="form-control" @bind="unidadEditandoDescripcion" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarEdicionUnidad">Guardar cambios</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Mensaje de error -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> unidades = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private const string PROYECTO = "indicadores";
    private const string TABLA = "unidadmedicion";

    private bool mostrarFormularioCrear = false;
    private string nuevaDescripcion = string.Empty;

    private bool mostrarModalEditar = false;
    private Dictionary<string, object> unidadEditando = new();
    private string unidadEditandoDescripcion = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarUnidades();
    }

    private async Task CargarUnidades()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            unidades = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar unidades: {ex.Message}";
            unidades = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private void MostrarFormularioCrear()
    {
        mostrarFormularioCrear = true;
    }

    private void CancelarCreacion()
    {
        mostrarFormularioCrear = false;
        nuevaDescripcion = string.Empty;
    }

    private async Task GuardarUnidad()
    {
        try
        {
            var nuevaUnidad = new Dictionary<string, object>
            {
                { "descripcion", nuevaDescripcion }
            };

            await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevaUnidad);
            await CargarUnidades();
            mostrarFormularioCrear = false;
            nuevaDescripcion = string.Empty;
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al crear la unidad: {ex.Message}";
        }
    }

    private void EditarUnidad(Dictionary<string, object> unidad)
    {
        unidadEditando = new Dictionary<string, object>(unidad);
        unidadEditandoDescripcion = ObtenerValor(unidad, "descripcion");
        mostrarModalEditar = true;
    }

    private async Task GuardarEdicionUnidad()
    {
        try
        {
            if (unidadEditando.ContainsKey("id") && unidadEditando["id"] != null)
            {
                string id = unidadEditando["id"].ToString()!;
                var datosActualizados = new Dictionary<string, object>
                {
                    { "descripcion", unidadEditandoDescripcion }
                };

                await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", id, datosActualizados);
                mostrarModalEditar = false;
                await CargarUnidades();
            }
            else
            {
                errorMensaje = "No se puede editar: la unidad no tiene un ID válido.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al guardar cambios: {ex.Message}";
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        unidadEditando = new();
        unidadEditandoDescripcion = string.Empty;
    }

    private async Task EliminarUnidad(Dictionary<string, object> unidad)
    {
        try
        {
            if (unidad.ContainsKey("id") && unidad["id"] != null)
            {
                string id = unidad["id"].ToString()!;
                await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
                await CargarUnidades();
            }
            else
            {
                errorMensaje = "La unidad no tiene un ID válido.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar la unidad: {ex.Message}";
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null || !diccionario.ContainsKey(clave))
            return string.Empty;
        return diccionario[clave]?.ToString() ?? string.Empty;
    }
}
